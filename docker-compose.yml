version: "3.8"
services:
  api:
    image: cos-python-sample:dev
    container_name: api
    entrypoint:
      - python
      - -m
      - banking_app_impl
    ports:
      - 9999:9010
    environment:
      COS_HOST: "chiefofstate"
      COS_PORT: "9000"
      APP_PORT: "9010"
      TRACE_HOST: tracer
      TRACE_PORT: 5775

  write-handler:
    image: cos-python-sample:dev
    container_name: write-handler
    entrypoint:
      - python
      - -m
      - write_handler_impl
    ports:
      - 50052
    environment:
      APP_PORT: "50052"
      TRACE_HOST: tracer
      TRACE_PORT: 5775

  read-handler:
    image: cos-python-sample:dev
    container_name: read-handler
    entrypoint:
      - python
      - -m
      - read_handler_impl
    ports:
      - 50053
    environment:
      APP_PORT: "50053"
      TRACE_HOST: tracer
      TRACE_PORT: 5775

  test-client:
    image: cos-python-sample:dev
    container_name: test-client
    entrypoint:
      - sleep
      - infinity
    environment:
      API_HOST: api
      API_PORT: "9010"
      WRITE_HANDLER_HOST: write-handler
      WRITE_HANDLER_PORT: "50052"
      COS_HOST: chiefofstate
      COS_PORT: "9000"
    volumes:
        - ./code/test_client:/app/test_client:delegated

  chiefofstate:
    image: ghcr.io/chief-of-state/chief-of-state:2.4.0
    volumes:
      - ./configs/readsides:/readsides
    command:
      - 'run'
    deploy:
      replicas: 1
      # resources:
      #   limits:
      #     cpus: 0
      #     memory: 
    ports:
      - 9200:9000
      - 9102
      - 9095
      - 5266
      - 8888
    environment:
      LOG_LEVEL: info
      LOG_STYLE: "SIMPLE"
      COS_DEPLOYMENT_MODE: docker
      COS_REPLICA_COUNT: 1
      COS_SERVICE_NAME: "chiefofstate"
      COS_ADDRESS: "0.0.0.0"
      COS_PORT: 9000
      COS_SNAPSHOT_FREQUENCY: 1
      COS_WRITE_SIDE_HOST: write-handler
      COS_WRITE_SIDE_PORT: 50052
      COS_DB_CREATE_TABLES: "true"
      COS_DB_USER: "postgres"
      COS_DB_PASSWORD: "changeme"
      COS_DB_HOST: "postgres"
      COS_DB_PORT: 5432
      COS_DB_DB: "postgres"
      COS_DB_SCHEMA: "public"
      COS_EVENTS_BATCH_THRESHOLD: 2
      COS_NUM_SNAPSHOTS_TO_RETAIN: 2
      COS_WRITE_PERSISTED_HEADERS: "x-custom-request-uuid"
      COS_READ_SIDE_ENABLED: "true"
      COS_READ_SIDE_CONFIG: /readsides
      COS_READ_SIDE_CONFIG__HOST__READSIDE_1: read-handler
      COS_READ_SIDE_CONFIG__PORT__READSIDE_1: 50053          
      COS_READ_SIDE_CONFIG__ENABLED__READSIDE_1: true
      COS_READ_SIDE_CONFIG__FAILURE_POLICY__READSIDE_1: REPLAY_SKIP
      OTEL_JAVAAGENT_ENABLED: "true"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otlp:4317
      OTEL_SERVICE_NAME: cospython
      OTEL_PROPAGATORS: "b3"

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: postgres
    ports:
      - 5432:5432

  tracer:
    image: jaegertracing/all-in-one:1.25
    container_name: tracer
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
      LOG_LEVEL: INFO
    ports:
      - "16686:16686" # frontend
      - "14268"
      - "5775"

  prometheus:
    image: prom/prometheus:v2.30.2
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"

  otlp:
    image: otel/opentelemetry-collector-contrib:0.52.0
    command: ["--config=/etc/otel/config.yaml", ""]
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "13133:13133" # health_check extension
      - "14250:14250"
      - "14268:14268"
      - "55681:55681" # Legacy OTLP/HTTP Port
      - "55680:55679" # zpages extension
      - "8888:8888" # Prometheus' metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "9411"  # Zipkin receiver
    volumes:
      - ./configs/otel-config.yaml:/etc/otel/config.yaml

